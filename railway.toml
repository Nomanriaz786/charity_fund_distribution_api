[[services]]
name = "charitydb"
[services.build]
builder = "dockerfile"
dockerfilePath = "Dockerfile.db"

[services.deploy]
startCommand = ""
restartPolicyType = "on_failure"
healthcheckPath = "/"
healthcheckTimeout = 300

[services.env]
ACCEPT_EULA = "Y"
MSSQL_PID = "Express"
SA_PASSWORD = "${{ secrets.DB_PASSWORD }}"
MSSQL_USER = "mssql"

[[services]]
name = "charityweb"
[services.build]
builder = "dockerfile"
dockerfilePath = "Dockerfile.web"

[services.deploy]
startCommand = "dotnet Charity_Fundraising_DBMS.dll"
restartPolicyType = "on_failure"
healthcheckPath = "/health"
dependsOn = ["charitydb"]

[services.env]
ASPNETCORE_ENVIRONMENT = "Development"
DB_SERVER = "${{ services.charitydb.host }}:${{ services.charitydb.port }}"
DB_NAME = "Charity_Fundraising_DBMS"
DB_USER = "sa"
DB_PASSWORD = "${{ secrets.DB_PASSWORD }}"
TrustServerCertificate = "true"
ConnectionRetryCount = "10"
ConnectionRetryDelay = "10"
ConnectionStrings__DefaultConnection = "Server=${{ services.charitydb.host }};Database=Charity_Fundraising_DBMS;User Id=sa;Password=${{ secrets.DB_PASSWORD }};TrustServerCertificate=True;"

[volumes]
sqldata = { mountPath = "/var/opt/mssql" }
